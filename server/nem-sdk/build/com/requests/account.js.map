{"version":3,"sources":["../../../src/com/requests/account.js"],"names":["urlEncodedHeader","data","endpoint","address","Promise","resolve","reject","options","url","formatEndpoint","method","headers","qs","error","response","body","statusCode","JSON","parse","harvestedBlocks","incomingTransactions","txHash","outgoingTransactions","unconfirmedTransactions","unlockInfo","startHarvesting","privateKey","stopHarvesting","forwarded","namespaces","parent","mosaicDefinitionsCreated","mosaicDefinitions","mosaics","allTransactions","module","exports"],"mappings":"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","file":"account.js","sourcesContent":["import Request from 'request';\nimport Helpers from '../../utils/helpers';\n\nlet urlEncodedHeader = {\n\t'Content-Type': 'application/x-www-form-urlencoded'\n}\n\n/**\n * Gets the AccountMetaDataPair of an account.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {object} - An [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} object\n */\nlet data = function(endpoint, address) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/get',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'address': address}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets an array of harvest info objects for an account.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [HarvestInfo]{@link http://bob.nem.ninja/docs/#harvestInfo} objects\n */\nlet harvestedBlocks = function(endpoint, address){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/harvests',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'address': address}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body).data);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets an array of TransactionMetaDataPair objects where the recipient has the address given as parameter to the request.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} txHash - A starting hash for search (optional)\n *\n * @return {array} - An array of [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} objects\n */\nlet incomingTransactions = function(endpoint, address, txHash){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/transfers/incoming',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'address': address, 'hash': txHash}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body).data);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets an array of TransactionMetaDataPair objects where the sender has the address given as parameter to the request.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} txHash - A starting hash for search (optional)\n *\n * @return {array} - An array of [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} objects\n */\nlet outgoingTransactions = function(endpoint, address, txHash){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/transfers/outgoing',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'address': address, 'hash': txHash}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body).data);\n\t\t    } else {\n\t\t\t\treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets the array of transactions for which an account is the sender or receiver and which have not yet been included in a block.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [UnconfirmedTransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#unconfirmedTransactionMetaDataPair} objects\n */\nlet unconfirmedTransactions = function(endpoint, address){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/unconfirmedTransactions',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'address': address}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body).data);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets information about the maximum number of allowed harvesters and how many harvesters are already using the node\n *\n * @param {object} endpoint - An NIS endpoint object\n *\n * @return {object} - An [UnlockInfo]{@link http://bob.nem.ninja/docs/#retrieving-the-unlock-info} object\n */\nlet unlockInfo = function(endpoint) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/unlocked/info',\n\t\t    method: 'POST',\n\t\t    headers: urlEncodedHeader\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n};\n\n/**\n * Unlocks an account (starts harvesting).\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} privateKey - A delegated account private key\n *\n * @return - Nothing\n */\nlet startHarvesting = function(endpoint, privateKey){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/unlock',\n\t\t    method: 'POST',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'value': privateKey}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n};\n\n /**\n * Locks an account (stops harvesting).\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} privateKey - A delegated account private key\n *\n * @return - Nothing\n */\nlet stopHarvesting = function(endpoint, privateKey){\n    return new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/lock',\n\t\t    method: 'POST',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'value': privateKey}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n};\n\n/**\n * Gets the AccountMetaDataPair of the account for which the given account is the delegate account\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {object} - An [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} object\n */\nlet forwarded = function(endpoint, address) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/get/forwarded',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'address': address}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets namespaces that an account owns\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} parent - The namespace parent (optional)\n *\n * @return {object} - An array of [NamespaceMetaDataPair]{@link http://bob.nem.ninja/docs/#namespaceMetaDataPair} objects\n */\nlet namespaces = function(endpoint, address, parent){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/namespace/page',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: { 'address': address, 'parent': parent || \"\"}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body).data);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets mosaic definitions that an account has created\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} parent - The namespace parent (optional)\n *\n * @return {object} - An array of [MosaicDefinition]{@link http://bob.nem.ninja/docs/#mosaicDefinition} objects\n */\nlet mosaicDefinitionsCreated = function(endpoint, address, parent){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/mosaic/definition/page',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: { 'address': address, 'parent': parent || \"\"}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets mosaic definitions that an account owns\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [MosaicDefinition]{@link http://bob.nem.ninja/docs/#mosaicDefinition} objects\n */\nlet mosaicDefinitions = function(endpoint, address){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/mosaic/owned/definition',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: { 'address': address }\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets mosaics that an account owns\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [Mosaic]{@link http://bob.nem.ninja/docs/#mosaic} objects\n */\nlet mosaics = function(endpoint, address){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/mosaic/owned',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: { 'address': address }\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets all transactions of an account\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} txHash - A starting hash (optional)\n *\n * @return {array} - An array of [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} objects\n */\nlet allTransactions = function(endpoint, address, txHash){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/account/transfers/all',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: { 'address': address, 'hash': txHash || '' }\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body).data);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\nmodule.exports = {\n\tdata,\n\tharvestedBlocks,\n\tincomingTransactions,\n\tunconfirmedTransactions,\n\tunlockInfo,\n\tstopHarvesting,\n\tstartHarvesting,\n\tforwarded,\n\tnamespaces,\n\tmosaicDefinitionsCreated,\n\tmosaicDefinitions,\n\tmosaics,\n\tallTransactions,\n\toutgoingTransactions\n}"]}