{"version":3,"sources":["../../../src/com/requests/transaction.js"],"names":["urlEncodedHeader","jsonHeader","data","Buffer","from","byteLength","announce","endpoint","serializedTransaction","Promise","resolve","reject","options","url","formatEndpoint","method","headers","json","JSON","parse","error","response","body","statusCode","byHash","txHash","qs","module","exports"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,IAAIA,mBAAmB;AACtB,iBAAgB;AADM,CAAvB;;AAIA,IAAIC,aAAa,SAAbA,UAAa,CAASC,IAAT,EAAe;AAC/B,QAAO;AACN,kBAAgB,kBADV;AAEH,oBAAkBC,OAAOC,IAAP,CAAYF,IAAZ,EAAkBG;AAFjC,EAAP;AAIA,CALD;;AAOA;;;;;;;;AAQA,IAAIC,WAAW,SAAXA,QAAW,CAASC,QAAT,EAAmBC,qBAAnB,EAA0C;AACrD,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA,MAAIC,UAAU;AACVC,QAAK,kBAAQC,cAAR,CAAuBP,QAAvB,IAAmC,uBAD9B;AAEVQ,WAAQ,MAFE;AAGVC,YAASf,WAAWO,qBAAX,CAHC;AAIVS,SAAMC,KAAKC,KAAL,CAAWX,qBAAX;;AAGV;AAPc,GAAd,CAQA,uBAAQI,OAAR,EAAiB,UAAUQ,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC9C,OAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,IAAuB,GAArC,EAA0C;AACtCb,YAAQY,IAAR;AACH,IAFD,MAEO;AACNX,WAAOS,KAAP;AACA;AACJ,GAND;AAOA,EAjBS,CAAP;AAkBH,CAnBD;;AAqBA;;;;;;;;AAQA,IAAII,SAAS,SAATA,MAAS,CAASjB,QAAT,EAAmBkB,MAAnB,EAA0B;AACtC,QAAO,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC;AACA,MAAIC,UAAU;AACVC,QAAK,kBAAQC,cAAR,CAAuBP,QAAvB,IAAmC,kBAD9B;AAEVQ,WAAQ,KAFE;AAGVC,YAAShB,gBAHC;AAIV0B,OAAI,EAAC,QAAQD,MAAT;;AAGR;AAPc,GAAd,CAQA,uBAAQb,OAAR,EAAiB,UAAUQ,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC9C,OAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,IAAuB,GAArC,EAA0C;AACtCb,YAAQQ,KAAKC,KAAL,CAAWG,IAAX,CAAR;AACH,IAFD,MAEO;AACNX,WAAOS,KAAP;AACA;AACJ,GAND;AAOA,EAjBM,CAAP;AAkBA,CAnBD;;AAqBAO,OAAOC,OAAP,GAAiB;AAChBtB,mBADgB;AAEhBkB;AAFgB,CAAjB","file":"transaction.js","sourcesContent":["import Request from 'request';\nimport Helpers from '../../utils/helpers';\n\nlet urlEncodedHeader = {\n\t'Content-Type': 'application/x-www-form-urlencoded'\n}\n\nlet jsonHeader = function(data) {\n\treturn {\n\t\t\"Content-Type\": \"application/json\",\n\t    \"Content-Length\": Buffer.from(data).byteLength\n\t}\n}\n\n/**\n * Broadcast a transaction to the NEM network\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {object} obj - A RequestAnnounce object\n *\n * @return {object} - A [NemAnnounceResult]{@link http://bob.nem.ninja/docs/#nemAnnounceResult} object\n */\nlet announce = function(endpoint, serializedTransaction) {\n    return new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/transaction/announce',\n\t\t    method: 'POST',\n\t\t    headers: jsonHeader(serializedTransaction),\n\t\t    json: JSON.parse(serializedTransaction)\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(body);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets a TransactionMetaDataPair object from the chain using it's hash\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} txHash - A transaction hash\n *\n * @return {object} - A [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} object\n */\nlet byHash = function(endpoint, txHash){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/transaction/get',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'hash': txHash}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\nmodule.exports = {\n\tannounce,\n\tbyHash\n}"]}