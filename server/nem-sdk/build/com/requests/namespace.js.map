{"version":3,"sources":["../../../src/com/requests/namespace.js"],"names":["urlEncodedHeader","roots","endpoint","id","Promise","resolve","reject","options","url","formatEndpoint","method","headers","qs","undefined","error","response","body","statusCode","JSON","parse","data","mosaicDefinitions","info","module","exports"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,IAAIA,mBAAmB;AACtB,iBAAgB;;AAGjB;;;;;;;;AAJuB,CAAvB,CAYA,IAAIC,QAAQ,SAARA,KAAQ,CAASC,QAAT,EAAmBC,EAAnB,EAAsB;AACjC,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC;AACA,MAAIC,UAAU;AACVC,QAAK,kBAAQC,cAAR,CAAuBP,QAAvB,IAAmC,sBAD9B;AAEVQ,WAAQ,KAFE;AAGVC,YAASX,gBAHC;AAIVY,OAAIC,cAAcV,EAAd,GAAmB,EAAC,YAAY,GAAb,EAAnB,GAAuC,EAAE,MAAMA,EAAR,EAAY,YAAW,GAAvB;;AAG/C;AAPc,GAAd,CAQA,uBAAQI,OAAR,EAAiB,UAAUO,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC9C,OAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,IAAuB,GAArC,EAA0C;AACtCZ,YAAQa,KAAKC,KAAL,CAAWH,IAAX,EAAiBI,IAAzB;AACH,IAFD,MAEO;AACNd,WAAOQ,KAAP;AACA;AACJ,GAND;AAOA,EAjBM,CAAP;AAkBA,CAnBD;;AAqBA;;;;;;;;AAQA,IAAIO,oBAAoB,SAApBA,iBAAoB,CAASnB,QAAT,EAAmBC,EAAnB,EAAsB;AAC7C,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC;AACA,MAAIC,UAAU;AACVC,QAAK,kBAAQC,cAAR,CAAuBP,QAAvB,IAAmC,mCAD9B;AAEVQ,WAAQ,KAFE;AAGVC,YAASX,gBAHC;AAIVY,OAAI,EAAC,aAAaT,EAAd;;AAGR;AAPc,GAAd,CAQA,uBAAQI,OAAR,EAAiB,UAAUO,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC9C,OAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,IAAuB,GAArC,EAA0C;AACtCZ,YAAQa,KAAKC,KAAL,CAAWH,IAAX,EAAiBI,IAAzB;AACH,IAFD,MAEO;AACNd,WAAOQ,KAAP;AACA;AACJ,GAND;AAOA,EAjBM,CAAP;AAkBA,CAnBD;;AAqBA;;;;;;;;AAQA,IAAIQ,OAAO,SAAPA,IAAO,CAASpB,QAAT,EAAmBC,EAAnB,EAAuB;AACjC,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC;AACA,MAAIC,UAAU;AACVC,QAAK,kBAAQC,cAAR,CAAuBP,QAAvB,IAAmC,YAD9B;AAEVQ,WAAQ,KAFE;AAGVC,YAASX,gBAHC;AAIVY,OAAI,EAAC,aAAaT,EAAd;;AAGR;AAPc,GAAd,CAQA,uBAAQI,OAAR,EAAiB,UAAUO,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC9C,OAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,IAAuB,GAArC,EAA0C;AACtCZ,YAAQa,KAAKC,KAAL,CAAWH,IAAX,CAAR;AACH,IAFD,MAEO;AACNV,WAAOQ,KAAP;AACA;AACJ,GAND;AAOA,EAjBM,CAAP;AAkBA,CAnBD;;AAqBAS,OAAOC,OAAP,GAAiB;AAChBvB,aADgB;AAEhBoB,qCAFgB;AAGhBC;AAHgB,CAAjB","file":"namespace.js","sourcesContent":["import Request from 'request';\nimport Helpers from '../../utils/helpers';\n\nlet urlEncodedHeader = {\n\t'Content-Type': 'application/x-www-form-urlencoded'\n}\n\n/**\n * Gets root namespaces.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {number} id - The namespace id up to which root namespaces are returned (optional)\n *\n * @return {object} - An array of [NamespaceMetaDataPair]{@link http://bob.nem.ninja/docs/#namespaceMetaDataPair} objects\n */\nlet roots = function(endpoint, id){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/namespace/root/page',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: undefined === id ? {'pageSize': 100} : { 'id': id, 'pageSize':100}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body).data);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets mosaic definitions of a namespace\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} id - The namespace Id\n *\n * @return {object} - An array of [MosaicDefinition]{@link http://bob.nem.ninja/docs/#mosaicDefinition} objects\n */\nlet mosaicDefinitions = function(endpoint, id){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/namespace/mosaic/definition/page',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'namespace': id}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body).data);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\n/**\n * Gets the namespace with given id.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} id - A namespace id\n *\n * @return {object} - A [NamespaceInfo]{@link http://bob.nem.ninja/docs/#namespace} object\n */\nlet info = function(endpoint, id) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Helpers.formatEndpoint(endpoint) + '/namespace',\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'namespace': id}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body));\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n}\n\nmodule.exports = {\n\troots,\n\tmosaicDefinitions,\n\tinfo\n}"]}