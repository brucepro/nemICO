{"version":3,"sources":["../../../src/com/requests/market.js"],"names":["urlEncodedHeader","xem","Promise","resolve","reject","options","url","marketInfo","method","headers","qs","error","response","body","statusCode","JSON","parse","btc","btcPrice","module","exports"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,IAAIA,mBAAmB;AACtB,iBAAgB;;AAGjB;;;;;AAJuB,CAAvB,CASA,IAAIC,MAAM,SAANA,GAAM,GAAU;AACnB,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC;AACA,MAAIC,UAAU;AACVC,QAAK,gBAAMC,UADD;AAEVC,WAAQ,KAFE;AAGVC,YAAST,gBAHC;AAIVU,OAAI,EAAC,WAAW,cAAZ;;AAGR;AAPc,GAAd,CAQA,uBAAQL,OAAR,EAAiB,UAAUM,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC9C,OAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,IAAuB,GAArC,EAA0C;AACtCX,YAAQY,KAAKC,KAAL,CAAWH,IAAX,EAAiB,SAAjB,CAAR;AACH,IAFD,MAEO;AACNT,WAAOO,KAAP;AACA;AACJ,GAND;AAOA,EAjBM,CAAP;AAkBA,CAnBD;;AAqBA;;;;;AAKA,IAAIM,MAAM,SAANA,GAAM,GAAU;AACnB,QAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC;AACA,MAAIC,UAAU;AACVC,QAAK,gBAAMY,QADD;AAEVV,WAAQ,KAFE;AAGVC,YAAST,gBAHC;AAIVU,OAAI,EAAC,QAAQ,IAAT;;AAGR;AAPc,GAAd,CAQA,uBAAQL,OAAR,EAAiB,UAAUM,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC9C,OAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,IAAuB,GAArC,EAA0C;AACtCX,YAAQY,KAAKC,KAAL,CAAWH,IAAX,EAAiB,KAAjB,CAAR;AACH,IAFD,MAEO;AACNT,WAAOO,KAAP;AACA;AACJ,GAND;AAOA,EAjBM,CAAP;AAkBA,CAnBD;;AAqBAQ,OAAOC,OAAP,GAAiB;AAChBnB,SADgB;AAEhBgB;AAFgB,CAAjB","file":"market.js","sourcesContent":["import Request from 'request';\nimport Nodes from '../../model/nodes';\n\nlet urlEncodedHeader = {\n\t'Content-Type': 'application/x-www-form-urlencoded'\n}\n\n/**\n * Gets market information from Poloniex api\n *\n * @return {object} - A MarketInfo object\n */\nlet xem = function(){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Nodes.marketInfo,\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'command': 'returnTicker'}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body)[\"BTC_XEM\"]);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n};\n\n/**\n * Gets BTC price from blockchain.info API\n *\n * @return {object} - A MarketInfo object\n */\nlet btc = function(){\n\treturn new Promise((resolve, reject) => {\n\t\t// Configure the request\n\t\tvar options = {\n\t\t    url: Nodes.btcPrice,\n\t\t    method: 'GET',\n\t\t    headers: urlEncodedHeader,\n\t\t    qs: {'cors': true}\n\t\t}\n\n\t\t// Start the request\n\t\tRequest(options, function (error, response, body) {\n\t\t    if (!error && response.statusCode == 200) {\n\t\t        resolve(JSON.parse(body)[\"USD\"]);\n\t\t    } else {\n\t\t    \treject(error);\n\t\t    }\n\t\t});\n\t});\n};\n\nmodule.exports = {\n\txem,\n\tbtc\n}"]}