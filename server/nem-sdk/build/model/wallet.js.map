{"version":3,"sources":["../../src/model/wallet.js"],"names":["_buildWallet","walletName","addr","brain","algo","encrypted","network","ciphertext","iv","toUpperCase","replace","createPRNG","password","length","Error","privateKey","ua2hex","randomBytes","kp","create","toAddress","publicKey","toString","encodePrivKey","createBrain","passphrase","derivePassSha","priv","importPrivateKey","isPrivateKeyValid","module","exports"],"mappings":"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","file":"wallet.js","sourcesContent":["import nacl from '../external/nacl-fast';\nimport convert from '../utils/convert';\nimport Helpers from '../utils/helpers';\nimport KeyPair from '../crypto/keyPair';\nimport CryptoHelpers from '../crypto/cryptoHelpers';\nimport Address from '../model/address';\n\n/**\n * Create a wallet object\n *\n * @param {string} walletName - The wallet name\n * @param {string} addr - The main account address\n * @param {boolean} brain - Is brain or not\n * @param {string} algo - The wallet algorithm\n * @param {object} encrypted - The encrypted private key object\n * @param {number} network - The network id\n *\n * @return {object} - A wallet object\n */\nlet _buildWallet = function(walletName, addr, brain, algo, encrypted, network) {\n    return {\n        \"name\": walletName,\n        \"accounts\": {\n            \"0\": {\n                \"brain\": brain,\n                \"algo\": algo,\n                \"encrypted\": encrypted.ciphertext || \"\",\n                \"iv\": encrypted.iv || \"\",\n                \"address\": addr.toUpperCase().replace(/-/g, ''),\n                \"label\": 'Primary',\n                \"network\": network,\n            }\n        }\n    };\n}\n\n/**\n * Create a wallet containing a private key generated using a Pseudo Random Number Generator\n *\n * @param {string} walletName - The wallet name\n * @param {string} password - The wallet password\n * @param {number} network - The network id\n *\n * @return {object} - A PRNG wallet object\n */\nlet createPRNG = function (walletName, password, network) {\n    if (!walletName.length || !password.length || !network) throw new Error('A parameter is missing !');\n    // Generate keypair from random private key\n    var privateKey = convert.ua2hex(nacl.randomBytes(32));\n    var kp = KeyPair.create(privateKey);\n    // Create address from public key\n    let addr = Address.toAddress(kp.publicKey.toString(), network);\n    // Encrypt private key using password\n    let encrypted = CryptoHelpers.encodePrivKey(privateKey, password);\n    return _buildWallet(walletName, addr, true, \"pass:bip32\", encrypted, network);\n}\n\n/**\n * Create a wallet containing a private key generated using a derived passphrase\n *\n * @param {string} walletName - The wallet name\n * @param {string} passphrase - The wallet passphrase\n * @param {number} network - The network id\n *\n * @return {object} - A Brain wallet object\n */\nlet createBrain = function (walletName, passphrase, network) {\n    if (!walletName.length || !passphrase.length || !network) throw new Error('A parameter is missing !');\n    var privateKey = CryptoHelpers.derivePassSha(passphrase, 6000).priv;\n    var kp = KeyPair.create(privateKey);\n    // Create address from public key\n    let addr = Address.toAddress(kp.publicKey.toString(), network);\n    return _buildWallet(walletName, addr, true, \"pass:6k\", \"\", network);\n}\n\n/**\n * Create a wallet containing any private key\n *\n * @param {string} walletName - The wallet name\n * @param {string} password - The wallet passphrase\n * @param {string} privateKey - The private key to import\n * @param {number} network - The network id\n *\n * @return {object} - A private key wallet object\n */\nlet importPrivateKey = function (walletName, password, privateKey, network) {\n    if (!walletName.length || !password.length || !network || !privateKey) throw new Error('A parameter is missing !');\n    if (!Helpers.isPrivateKeyValid(privateKey)) throw new Error('Private key is not valid !');\n    // Create address from private key\n    let kp = KeyPair.create(privateKey);\n    let addr = Address.toAddress(kp.publicKey.toString(), network);\n    // Encrypt private key using password\n    let encrypted = CryptoHelpers.encodePrivKey(privateKey, password);\n    return _buildWallet(walletName, addr, false, \"pass:enc\", encrypted, network);\n}\n\nmodule.exports = {\n    createPRNG,\n    createBrain,\n    importPrivateKey\n}"]}