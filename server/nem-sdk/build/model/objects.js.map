{"version":3,"sources":["../../src/model/objects.js"],"names":["endpoint","host","port","common","password","privateKey","mosaicAttachment","namespaceId","mosaicName","quantity","mosaicDefinitionMetaDataPair","invoice","transferTransaction","recipient","amount","message","signatureTransaction","multisignatureModificationTransaction","mosaicDefinitionTransaction","namespaceProvisionTransaction","importanceTransferTransaction","get","objectName","create","module","exports"],"mappings":"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","file":"objects.js","sourcesContent":["import Network from './network';\n\nlet endpoint = function(host, port) {\n    return {\n        \"host\": host || \"\",\n        \"port\": port || \"\"\n    }\n};\n\nlet common = function(password, privateKey) {\n\treturn {\n        \"password\": password || \"\",\n\t    \"privateKey\": privateKey || \"\"\n    }\n};\n\nlet mosaicAttachment = function(namespaceId, mosaicName, quantity) {\n    return {\n        \"mosaicId\": {\n        \t\"namespaceId\": namespaceId || \"\",\n        \t\"name\": mosaicName || \"\"\n        },\n        \"quantity\": quantity || 0\n    }\n};\n\nlet mosaicDefinitionMetaDataPair = function() {\n    return {\n        \"nem:xem\": {\n            \"mosaicDefinition\" : {\n                \"creator\": \"3e82e1c1e4a75adaa3cba8c101c3cd31d9817a2eb966eb3b511fb2ed45b8e262\",\n                \"description\": \"reserved xem mosaic\",\n                \"id\": {\n                    \"namespaceId\": \"nem\",\n                    \"name\": \"xem\"\n                },\n                \"properties\": [{\n                    \"name\": \"divisibility\",\n                    \"value\": \"6\"\n                }, {\n                    \"name\": \"initialSupply\",\n                    \"value\": \"8999999999\"\n                }, {\n                    \"name\": \"supplyMutable\",\n                    \"value\": \"false\"\n                }, {\n                    \"name\": \"transferable\",\n                    \"value\": \"true\"\n                }],\n                \"levy\": {}\n            }\n        }/*,\n        \"another.namespace:mosaic\": {\n            \"mosaicDefinition\": {\n                Add mosaic definitions in this model to simplify transactions for a particular mosaic\n            }\n        } ,\n        \"another.namespace.again:mosaic\": {\n            \"mosaicDefinition\": {\n                ...\n            }\n        } */\n    }\n}\n\nlet invoice = function() {\n    return  {\n        \"v\": \"v = 1 for testnet, v = 2 for mainnet\",\n        \"type\": 2,\n        \"data\": {\n            \"addr\": \"\",\n            \"amount\": 0,\n            \"msg\": \"\",\n            \"name\": \"\"\n        }\n    }\n}\n\n/**\n * An un-prepared transfer transaction object\n *\n * @return {object}\n */\nlet transferTransaction = function(recipient, amount, message) {\n    return {\n        \"amount\": amount || 0,\n        \"recipient\": recipient || \"\",\n        \"recipientPublicKey\": \"\",\n        \"isMultisig\": false,\n        \"multisigAccount\" : \"\",\n        \"message\": message || \"\",\n        \"isEncrypted\" : false,\n        \"mosaics\": []\n    }\n}\n\nlet signatureTransaction = {}\n\nlet multisignatureModificationTransaction = {}\n\nlet mosaicDefinitionTransaction = {}\n\nlet namespaceProvisionTransaction = {}\n\nlet importanceTransferTransaction = {}\n\n/**\n * Get an empty object \n *\n * @param {string} objectName - The name of the object\n *\n * @retrun {object} - The desired object\n */\nlet get = function(objectName) {\n    switch(objectName) {\n        case \"common\":\n            return common();\n            break;\n        case \"endpoint\":\n            return endpoint();\n            break;\n        case \"mosaicAttachment\":\n            return mosaicAttachment();\n            break;\n        case \"mosaicDefinitionMetaDataPair\":\n            return mosaicDefinitionMetaDataPair();\n            break;\n        case \"invoice\":\n            return invoice();\n            break;\n        case \"transferTransaction\":\n            return transferTransaction();\n            break;\n        default:\n            return {};\n    } \n}\n\n/**\n * Get function creating objects\n *\n * @param {string} objectName - The name of the object\n *\n * @retrun {function} - The object creation function corresponding to the object name\n */\nlet create = function(objectName) {\n    switch(objectName) {\n        case \"common\":\n            return common;\n            break;\n        case \"endpoint\":\n            return endpoint;\n            break;\n        case \"mosaicAttachment\":\n            return mosaicAttachment;\n            break;\n        case \"invoice\":\n            return invoice;\n            break;\n        case \"transferTransaction\":\n            return transferTransaction;\n            break;\n        default:\n            return {};\n    } \n}\n\nmodule.exports = {\n    get,\n    create\n}"]}