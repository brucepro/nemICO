{"version":3,"sources":["../../src/model/transactions.js"],"names":["NETWORK_VERSION","val","network","data","mainnet","id","testnet","_multisigWrapper","senderPublicKey","innerEntity","due","timeStamp","createNEMTimeStamp","version","_createCommonPart","multisigTransaction","custom","MultisigTransaction","entity","extendObj","txtype","prepareTransferTransaction","common","tx","Error","kp","create","fixPrivateKey","privateKey","actualSender","isMultisig","multisigAccount","publicKey","toString","recipientCompressedKey","recipient","amount","Math","round","message","prepareMessage","mosaics","mosaicsFee","_constructTransferTransaction","prepareMosaicTransferTransaction","mosaicDefinitionMetaDataPair","calculateMosaics","transfer","msgFee","payload","length","calculateMessage","fee","calculateMinimum","totalFee","toUpperCase","replace","prepareSignatureTransaction","prepareMultisignatureModificationTransaction","prepareMosaicDefinitionTransaction","prepareNamespaceProvisionTransaction","prepareImportanceTransferTransaction","encryptMessage","encode","recipientPubKey","isHexadecimal","substring","utf8ToHex","send","endpoint","result","serializeTransaction","signature","sign","obj","ua2hex","transaction","announce","JSON","stringify","prepare","objectName","module","exports"],"mappings":"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","file":"transactions.js","sourcesContent":["import Network from './network';\nimport Helpers from '../utils/helpers';\nimport Convert from '../utils/convert';\nimport TransactionTypes from './transactionTypes';\nimport Fees from './fees';\nimport Serialization from '../utils/serialization';\nimport KeyPair from '../crypto/keyPair';\nimport CryptoHelpers from '../crypto/cryptoHelpers';\nimport Requests from '../com/requests';\n\n/**\n * Set the network version\n *\n * @param {number} val - A version number (1 or 2)\n * @param {number} network - A network id\n *\n * @return {number} - A network version\n */\nlet NETWORK_VERSION = function(val, network) {\n    if (network === Network.data.mainnet.id) {\n        return 0x68000000 | val;\n    } else if (network === Network.data.testnet.id) {\n        return 0x98000000 | val;\n    }\n    return 0x60000000 | val;\n}\n\n/**\n * Wrap a transaction in a multisignature transaction\n *\n * @param {string} senderPublicKey - The sender public key\n * @param {object} innerEntity - The transaction entity to wrap\n * @param {number} due - The transaction deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - A [MultisigTransaction]{@link http://bob.nem.ninja/docs/#multisigTransaction} object\n */\nlet _multisigWrapper = function(senderPublicKey, innerEntity, due, network) {\n\tlet timeStamp = Helpers.createNEMTimeStamp();\n    let version = NETWORK_VERSION(1, network);\n    let data = _createCommonPart(TransactionTypes.multisigTransaction, senderPublicKey, timeStamp, due, version, network);\n    let custom = {\n        'fee': Fees.MultisigTransaction,\n        'otherTrans': innerEntity\n    };\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\n/**\n * Create the common part of a transaction\n *\n * @param {number} txType - A type of transaction\n * @param {string} senderPublicKey - The sender public key\n * @param {number} timeStamp - A timestamp for the transation\n * @param {number} due - A deadline in minutes\n * @param {number} version - A network version\n * @param {number} network - A network id\n *\n * @return {object} - A common transaction object\n */\nlet _createCommonPart = function(txtype, senderPublicKey, timeStamp, due, version, network) {\n    return {\n        'type': txtype,\n        'version': version || NETWORK_VERSION(1, network),\n        'signer': senderPublicKey,\n        'timeStamp': timeStamp,\n        'deadline': timeStamp + due * 60\n    };\n}\n\n/**\n * Prepare a transfer transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - The un-prepared transfer transaction object\n * @param {number} network - A network id\n *\n * @return {object} - A [TransferTransaction]{@link http://bob.nem.ninja/docs/#transferTransaction} object ready for serialization\n */\nlet prepareTransferTransaction = function(common, tx, network){\n    if (!common || !tx || !network) throw new Error('Missing parameter !');\n\tlet kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let recipientCompressedKey = tx.recipient.toString();\n    let amount = Math.round(tx.amount * 1000000);\n    let message = prepareMessage(common, tx);\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let mosaics = null;\n    let mosaicsFee = null\n    let entity = _constructTransferTransaction(actualSender, recipientCompressedKey, amount, message, due, mosaics, mosaicsFee, network);\n    if (tx.isMultisig) {\n        entity = _multisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n\n/**\n * Prepare a mosaic transfer transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - The un-prepared transfer transaction object\n * @param {object} mosaicDefinitionMetaDataPair - The mosaicDefinitionMetaDataPair object with properties of mosaics to send\n * @param {number} network - A network id\n *\n * @return {object} - A [TransferTransaction]{@link http://bob.nem.ninja/docs/#transferTransaction} object ready for serialization\n */\nlet prepareMosaicTransferTransaction = function(common, tx, mosaicDefinitionMetaDataPair, network){\n    if (!common || !tx || !mosaicDefinitionMetaDataPair || tx.mosaics === null || !network) throw new Error('Missing parameter !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let recipientCompressedKey = tx.recipient.toString();\n    let amount = Math.round(tx.amount * 1000000);\n    let message = prepareMessage(common, tx);\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let mosaics = tx.mosaics;\n    let mosaicsFee = Fees.calculateMosaics(amount, mosaicDefinitionMetaDataPair, mosaics);\n    let entity = _constructTransferTransaction(actualSender, recipientCompressedKey, amount, message, due, mosaics, mosaicsFee, network);\n    if (tx.isMultisig) {\n        entity = _multisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n/***\n * Create a transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {string} recipientCompressedKey - The recipient account public key\n * @param {number} amount - The amount to send in micro XEM\n * @param {object} message - The message object\n * @param {number} due - The deadline in minutes\n * @param {array} mosaics - The array of mosaics to send\n * @param {number} mosaicFee - The fees for mosaics included in the transaction\n * @param {number} network - A network id\n *\n * @return {object} - A [TransferTransaction]{@link http://bob.nem.ninja/docs/#transferTransaction} object\n */\nlet _constructTransferTransaction = function(senderPublicKey, recipientCompressedKey, amount, message, due, mosaics, mosaicsFee, network) {\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let version = mosaics ? NETWORK_VERSION(2, network) : NETWORK_VERSION(1, network);\n    let data = _createCommonPart(TransactionTypes.transfer, senderPublicKey, timeStamp, due, version);\n    let msgFee = message.payload.length ? Fees.calculateMessage(message) : 0;\n    let fee = mosaics ? mosaicsFee : Fees.calculateMinimum(amount / 1000000);\n    let totalFee = (msgFee + fee) * 1000000;\n    let custom = {\n        'recipient': recipientCompressedKey.toUpperCase().replace(/-/g, ''),\n        'amount': amount,\n        'fee': totalFee,\n        'message': message,\n        'mosaics': mosaics\n    };\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\nlet prepareSignatureTransaction = function(){\n\n}\n\nlet prepareMultisignatureModificationTransaction = function(){\n\n}\n\nlet prepareMosaicDefinitionTransaction = function(){\n\n}\n\nlet prepareNamespaceProvisionTransaction = function () {\n\n}\n\nlet prepareImportanceTransferTransaction = function() {\n\n}\n\n/**\n * Build a message object\n *\n * @param {object} common - An common object\n * @param {object} tx - An un-prepared transferTransaction object\n *\n * @return {object} - A prepared message object\n */\nlet prepareMessage = function(common, tx) {\n    if (tx.encryptMessage && common.privateKey) {\n        return {\n            'type': 2,\n            'payload': CryptoHelpers.encode(common.privateKey, tx.recipientPubKey, tx.message.toString())\n        };\n    } else {\n        return {\n            'type': 1,\n            'payload': Helpers.isHexadecimal(tx.message.toString()) && tx.message.toString().substring(0, 2) === 'fe' ? tx.message.toString() : Convert.utf8ToHex(tx.message.toString())\n        };\n    }\n}\n\n/**\n * Serialize a transaction and broadcast it to the network\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {object} entity - The prepared transaction object\n * @param {object} common - A password/privateKey object\n *\n * @return {promise} - An announce transaction promise of the NetworkRequests service\n */\nlet send = function(common, entity, endpoint) {\n    if(!endpoint || !entity || !common) throw new Error('Missing parameter !');\n    if (common.privateKey.length !== 64 && common.privateKey.length !== 66) throw new Error('Invalid private key, length must be 64 or 66 characters !');\n    if (!Helpers.isHexadecimal(common.privateKey)) throw new Error('Private key must be hexadecimal only !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let result = Serialization.serializeTransaction(entity);\n    let signature = kp.sign(result);\n    let obj = {\n        'data': Convert.ua2hex(result),\n        'signature': signature.toString()\n    };\n    return Requests.transaction.announce(endpoint, JSON.stringify(obj));\n}\n\n/**\n * Prepare a transaction object \n *\n * @param {string} objectName - The name of the object to prepare\n *\n * @retrun {function} - The prepare function corresponding to the object name\n */\nlet prepare = function(objectName) {\n    switch(objectName) {\n        case \"transferTransaction\":\n            return prepareTransferTransaction;\n            break;\n        case \"mosaicTransferTransaction\":\n            return prepareMosaicTransferTransaction;\n            break;\n        default:\n            return {};\n    } \n}\n\nmodule.exports = {\n    prepare,\n    send,\n    prepareMessage\n}"]}